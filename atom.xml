<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DailyRecord::Base]]></title>
  <link href="http://littlestarling.github.com/atom.xml" rel="self"/>
  <link href="http://littlestarling.github.com/"/>
  <updated>2012-04-23T18:38:14+09:00</updated>
  <id>http://littlestarling.github.com/</id>
  <author>
    <name><![CDATA[littlestarling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git道場第1回に参加した]]></title>
    <link href="http://littlestarling.github.com/blog/2012/04/23/git-dojo-vol-dot-1/"/>
    <updated>2012-04-23T18:34:00+09:00</updated>
    <id>http://littlestarling.github.com/blog/2012/04/23/git-dojo-vol-dot-1</id>
    <content type="html"><![CDATA[<p>ちょうど時期的にあいていた（と思っていた）こともあって、git道場の実行委員兼tutorみたいなことをしてきた。</p>

<p>初心者向けの作業を徹底する、という文字通り型を覚えるような内容なので、告知1時間で釣られるような情強には
物足りないのではないかという危惧もあったものの、いざやってみると複数人で作業してコンフリクトを強いられる
というシチュエーションはそこそこ目新しく感じた人が多いように思った。</p>

<p>結構いろんなバックボーンを持っている人が多くて、話を聞いたり、こちらなりに説明してみたりといったところは
勉強になった。masterの位置が相対的であるというのは面白いね、とは@jm6xxu氏の言。</p>

<p>Mercurial使いの人もいて、リポジトリの家系図に対してどうアプローチするかといった話も聞けた。先日ちょうど
MercurialとGitについてという話でひとしきり話題になったこともあったので、この辺自分なりの解釈をまとめたい
と思うところ。</p>

<p>道場本体の説明としてはそれぞれに利点と欠点がある、という締めだったので、あとは参加者がどのように感じた
のかを消化していってくれればよいのではないかなと思う。あそこに1000円という参加費を出した価値以上のもの
を感じられるような空気はできていたんじゃないかなと、運営に関わった者の一人として少し自負したいところは
あるけれどどう感じられたんだろう。</p>

<p>僕個人は徹底してコミットの内容とコミットメッセージの集合は人間が行った操作の意志の表明として使うことで
きれいな家系図になる、という視点で話していたけど、そこに異論を持つ人もいるかもしれない。特にコンフリクト
解消時の作業が作業者の意図する内容と異なる操作だった場合、そこに乖離が発生してしまう。
コンフリクトの解消自体はどこまでいっても人間の作業としては注意力を要するところだし、そこに責任を持つと
いうのが大事なのだということで必ずcommit時に-sつけて署名するのも本来やった方がいいんだろうなとか。</p>

<p>コンピュータがよろしくやってくれるというところは増えているけれど、その分人間が行うことははっきり意志を
持たなければならないし、表明すべきだ、という概念的な話に終始してしまいそうだけど、そこは非常に強く感じ
た1日だった。</p>

<p>イベント主旨的には気楽にheroku使えるようにもなってくださいね、というのもあるし、第1回で有料イベントな
がらそれ以上のものを感じさせてくれた会場提供のフューチャーアーキテクトさんの力は非常に大きかったと思う。
継続して開催していく方向だそうだけどあまり会場ハードルを高めずに各々の道場でやっていけるような形になって
いくといいなと思った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[素数日を求める]]></title>
    <link href="http://littlestarling.github.com/blog/2012/04/19/calculate-prime-days/"/>
    <updated>2012-04-19T10:42:00+09:00</updated>
    <id>http://littlestarling.github.com/blog/2012/04/19/calculate-prime-days</id>
    <content type="html"><![CDATA[<p>blogのpostテストがてら。</p>

<div><script src='https://gist.github.com/2372772.js?file='></script>
<noscript><pre><code>#-*- coding:utf-8 -*-
require 'date'
require 'mathn'

def prime_days(sday, eday)
  sday = Date.today unless sday
  eday = Date.today unless eday
  begin
    sday = Date.parse(sday)
    eday = Date.parse(eday)
  rescue
    puts %Q!invalid date. Usage: prime_days &quot;2012-01-01&quot; &quot;2020-01-01&quot;!
    return
  end
  s = sday.strftime(&quot;%Y%m%d&quot;).to_i
  e = eday.strftime(&quot;%Y%m%d&quot;).to_i
  days = []
  (s..e).each do |num|
    if num.prime?
      begin
        day = Date.parse(num.to_s)
        days &lt;&lt; day.to_s
      rescue
      end
    end
  end

  puts &quot;prime days from #{sday} to #{eday}:&quot;
  days.each{|day| puts day}
end

prime_days(ARGV[0], ARGV[1])</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
